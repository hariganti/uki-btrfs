#! /usr/bin/env python3

################################################################################
###                                 UKI BTRFS                                ###
################################################################################
# This script is intended to make the generation of multi-profile UKIs easier  #
# by using a configuration file to drive the:                                  #
#   - Kernel                                                                   #
#   - Initramfs                                                                #
#   - Command line                                                             #
# for a single default and multiple fallback profiles. Currently, the tool     #
# supports having one kernel for all profiles, two initramfs (one default and  #
# one fallback), and a command line per profile. The structure, not including  #
# other required sections, looks something like:                               #
#   linux                                                                      #
#   initramfs-fallback                                                         #
#   profile0                                                                   #
#   commandline0                                                               #
#   profile1                                                                   #
#   commandline1                                                               #
#   profile2                                                                   #
#   initramfs-default                                                          #
#   commandline2                                                               #
# Basic usage is to call the script, which expects the initramfs images to     #
# be built by a separate utility, and let it build the UKI based on a config   #
# file. Building the UKI depends on systemd-ukify.                             #
################################################################################
#                                Hari Ganti | 2025/03/19 | hariganti@gmail.com #
################################################################################

### IMPORTS ###
import re
import os

from datetime import datetime, timedelta

### FUNCTIONS ###
# Get all subvolumes creates as snapshots
def get_snapshot_subvolumes():
  command   = 'sudo btrfs subvolume list /'
  pattern   = '(timeshift-btrfs/snapshots/.*/@)\n'
  timefmt   = '%Y-%m-%d_%H-%M-%S'
  snapshots = \
    [
      (x, datetime.strptime(x.split('/')[2], timefmt))
      for x in re.findall(pattern, os.popen(command).read())
    ]

  return sorted(snapshots, key = lambda x: x[1], reverse = True)

# Make a command line from the specified files in the given directory
def make_command_line_from_dir(path = '/etc/cmdline.d/', filter = '*'):
  command = 'echo $(cat ' + path + filter + ')'
  return os.popen(command).read().rstrip()

# Filter snapshot list to specified intervals
def filter_snapshots(snapshots, filter = [0, 6, 29]):
  cur   = 0
  now   = datetime.now() - timedelta(minutes = 1) # 1 minute leeway for snapshot timing
  snaps = list()
  for snapshot in snapshots:
    if (now - snapshot[1]).days >= filter[cur]:
      snaps.append(snapshot[0])
      cur += 1
      if cur == len(filter):
        break

  return snaps

# Amend command lines with snapshot subvolumes
def amend_command_line_subvols(cmdline, subvols):
  return \
    [
      cmdline.replace('subvol=@', 'subvol=' + subvol)
      for subvol in subvols
    ]

# Build UKI according to the pattern described at the top
# TODO: Take one or more dictionaries of cmdlines and initrds
def build_uki(default, backup):
  tmpcmd = 'mktemp'
  config = os.popen(tmpcmd).read().rstrip()
  print('Config file: ' + config + '\n')
  names = ['1 Day', '7 Day', '30 Day']
  bckps = len(backup)
  profs = [0] * (bckps)
  for i in range(1, bckps):
    profs[i - 1]  = os.popen(tmpcmd).read().rstrip()
    print('Profile at: ' + profs[i - 1])
    command       = 'ukify build '                              \
      '--config='         + config    + ' '                     \
      '--profile="TITLE=' + names[i]  + ' ID=' + str(i) + '" '  \
      '--cmdline="'       + backup[i] + '" '                    \
      '--output='         + profs[i - 1]

    print(os.popen(command).read())

  profs[-1] = os.popen(tmpcmd).read().rstrip()
  print('Profile at: ' + profs[-1])
  command   = 'ukify build '                                \
    '--config='         + config    + ' '                   \
    '--profile="TITLE=Default id='  + str(bckps) + '" '     \
    '--initrd=/boot/initramfs-linux.img '                   \
    '--cmdline="'       + default   + '" '                  \
    '--splash=/usr/share/systemd/bootctl/splash-arch.bmp '  \
    '--output='         + profs[-1]

  print(os.popen(command).read())

  command = 'sudo ukify build '                       \
    '--linux=/boot/vmlinuz-linux '                    \
    '--profile="TITLE=' + names[0]  + ' ID=0' + '" '  \
    '--initrd=/boot/initramfs-linux-fallback.img '    \
    '--cmdline="'       + backup[0] + '" '

  for profile in profs:
    command += '--join-profile=' + profile + ' '

  command += '--output=./output/uki.efi'

  print(os.popen(command).read())
  return

### MAIN ###
if __name__ == '__main__':
  snapshots = get_snapshot_subvolumes()
  # print(snapshots)

  default_cmdline = make_command_line_from_dir(filter = '*.conf')
  # print(default_cmdline)

  fallback_cmdline_base = make_command_line_from_dir(filter = '*[!d].conf')
  # print(fallback_cmdline)

  subvols = filter_snapshots(snapshots)
  # print(*subvols, sep = '\n')

  backup_cmdline = amend_command_line_subvols(fallback_cmdline_base, subvols)
  # print(*backup_cmdline, sep = '\n')

  build_uki(default_cmdline, backup_cmdline)
