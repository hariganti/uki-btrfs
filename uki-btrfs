#! /usr/bin/env python3

################################################################################
###                                 UKI BTRFS                                ###
################################################################################
# This script is intended to make the generation of multi-profile UKIs easier  #
# by using a configuration file to drive the:                                  #
#   - Kernel                                                                   #
#   - Initramfs                                                                #
#   - Command line                                                             #
# for a single default and multiple fallback profiles. Currently, the tool     #
# supports having one kernel for all profiles, two initramfs (one default and  #
# one fallback), and a command line per profile. The structure, not including  #
# other required sections, looks something like:                               #
#   linux                                                                      #
#   initramfs-fallback                                                         #
#   profile0                                                                   #
#   commandline0                                                               #
#   profile1                                                                   #
#   commandline1                                                               #
#   profile2                                                                   #
#   initramfs-default                                                          #
#   commandline2                                                               #
# Basic usage is to call the script, which expects the initramfs images to     #
# be built by a separate utility, and let it build the UKI based on a config   #
# file. Building the UKI depends on systemd-ukify.                             #
################################################################################
#                                Hari Ganti | 2025/03/19 | hariganti@gmail.com #
################################################################################

### IMPORTS ###
import re
import os

from datetime import datetime, timedelta

### FUNCTIONS ###
# Get all subvolumes creates as snapshots
def get_snapshot_subvolumes():
  command   = 'sudo btrfs subvolume list /'
  pattern   = '(timeshift-btrfs/snapshots/.*/@)\n'
  timefmt   = '%Y-%m-%d_%H-%M-%S'
  snapshots = \
  [
    (x, datetime.strptime(x.split('/')[2], timefmt))
    for x in re.findall(pattern, os.popen(command).read())
  ]

  return sorted(snapshots, key = lambda x: x[1], reverse = True)

# Make a command line from the specified files in the given directory
def make_command_line_from_dir(path = '/etc/cmdline.d/', filter = '*'):
  command = 'echo $(cat ' + path + filter + ')'
  return os.popen(command).read().rstrip()

# Filter snapshot list to specified intervals
def filter_snapshots(snapshots, filter = [0, 6, 29]):
  cur   = 0
  now   = datetime.now() - timedelta(minutes = 1) # 1 minute leeway for snapshot timing
  snapf = list()
  for snapshot in snapshots:
    td = now - snapshot[1]
    if td.days >= filter[cur]:
      snapf.append(snapshot[0])
      cur += 1
      if cur == len(filter):
        break

  return snapf

### MAIN ###
if __name__ == '__main__':
  snapshots = get_snapshot_subvolumes()
  # print(snapshots)

  cmdline = make_command_line_from_dir(filter = '*.conf')
  # print(cmdline)

  filtered_snapshots = filter_snapshots(snapshots)
  print(*filtered_snapshots, sep = '\n')
